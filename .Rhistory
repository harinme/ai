a.new
#(4) 팩터 f에 저장된 값의 종류를 출력하시오.
levels(a.new)
day <- c('Mon','Wed')
people <- list(name="Bill", age=20, gender='M', student=TRUE,day=day)
people['day']
people['day']
a <- 4
b <- 5
c <- a+b
c
y=2*2+5x+10
y <- 2*2+5x+10
y <- 2*2+5*x+10
x <- 6
y
x <- 6
y <- 2*2+5*x+10
y
x <- 8
y <- 2*2+5*x+10
y
x <- 10
y
y <- 2*2+5*x+10
y
val.a <- 10
valb <- 20
val.b <- 20
sum.ab <- val.a +val.b
sunm.ab
sum.ab
z <- matrix(1:30, nrow = 5, ncol = 6)
z
z <- matrix(1:30, nrow = 5, ncol = 6, byrow = T)
z
z <- matrix(101:200, nrow = 10,ncol = 10)
z
x <- 1:5
y <- 8:12
# 2차원 매트릭스
# 칸으로 합치기
sum.xy <- cbind(x,y)
sum.xy
# 줄(row) 합치기
sum.xy1 <- rbind(x,y)
sum.xy1
n1 <- 1:5
n2 <- 101:105
n3 <- 201:205
bind.n123 <- rbind(n1,n2,n3)
bind.n123
z <- matrix(12:1,nrow = 3,ncol = 4, byrow = T)
z
rownames(z) <- c('v1','v2','v3')
z
# 또는 1행씩 만들어서 합치기
v1 <- 12:9
v2 <-  8:5
v3 <- 4:1
z1 <- rbind(v1,v2,v3)
z1
# 5를 검색하기
z1[2,4]
z1,2
z1[,2]
z1
z1[,2]
z1[3,2]
z1[1,]
z1[,2]
# 1행 3열
z1[c(1,3),]
#2 열 4열
z1[,c(2,4)]
# 2열~ 4열
z1[,2:4]
# 행 이름 주기
# 열 이름 주기
score <- matrix(c(90,85,69,78, 85,96,49,95, 90,80,70,60 ),nrow=4,ncol = 3)
score
# 행 이름 주기
rownames(score) <- c('John','Tom','Mark','Jane')
# 열 이름 주기
colnames(score) <- c('English','Math','Science')
score
score[2,2]
score[Jane,"Science"]
score['Jane',"Science"]
score['Jane',"Science"] #score[4,3]
score['Jane','English']
# Tom의 점수를 검색하기
score['Tom']
# Tom의 점수를 검색하기
score['Tom',]
#수학 점수 검색하기
score[,'Math']
# 수학 점수의 평균 구하기
mean(score[,'Math'])
# 학생의 이름은?
rownames(score)
# 과목명(열은)?
colnames(score)
# 2번째 학생명은?
rownames(score)[2]
# 3번째 과목명은?
colnames(score)[3]
z
colnames(z)<-(c(a1,a2,a3,a4))
colnames(z)<-(a1,a2,a3,a4))
colnames(z)<-(a1,a2,a3,a4)
colnames(z)<-(c('a1','a2','a3','a4'))
z
#(3) 매트릭스 z에 1~7 사이의 홀수로 구성된 벡터 v4를 행 방향으로 추가하시오.
v4 <- (seq(1,7,2))
v4
z[4,] <- v4
z <- rbind(z,v4)
z
#(4) 4행에 있는 모든 값을 출력하시오.
z[4,]
#(5) 2~4행의 값 중 a1, a3열에 있는 값을 출력하시오.
z[c(2:4),a1|a3]
#(5) 2~4행의 값 중 a1, a3열에 있는 값을 출력하시오.
z[c(2:4),'a1'|'a3']
#(5) 2~4행의 값 중 a1, a3열에 있는 값을 출력하시오.
z[c(2:4),'a1']
#(5) 2~4행의 값 중 a1, a3열에 있는 값을 출력하시오.
z[c(2:4),'a1'|c(2:4),'a3']
#(6) 매트릭스 z의 세 번째 행의 이름을 출력하시오.
rownames(z)[3]
#(5) 2~4행의 값 중 a1, a3열에 있는 값을 출력하시오.
z[c(2:4),c('a1','a3')]
# (7) 3번째 열의 이름 출력
colnames(z)[3]
## 데이터 프레임 만들기
city <- c('서울','도쿄','워싱턴')
rank <- c(1,3,2)
city.info <- data.frame(city,rank)
city.info
etc <- c(T,T,F)
city.info <- data.frame(city,rank,etc)
city.info
city.info[2,'city']
city.info
city.info[1,'rank']
rownames(city.info)
iris
head(iris)
tail(iris)
head(iris, n = 10)
tail(iris)
head(iris, n = 10)
iris
tail(iris)
head(iris[,c(1,2)])
head(iris[,c(1:2)])
head(iris[,'Petal.width'])
head(iris[,'Petal.width'])
iris
head(iris[,'Petal.Width'])
dim(iris)
str(iris)
iris[,5]
unique(iris)
unique(iris[,5])
table(iris[,"Species"])
colSums(iris[,])
colSums(iris[,-5])
colMeans(iris[,-5])
rowSums(iris[,-5])
rowSums(iris[,-5])
rowMeans(iris[,-'Species'])
rowMeans(iris[,-5])
state.x77
st <- data.frame(state.x77)
st
state.x77
st
state.x77
#(3) st의 열 이름을 출력하시오.
row.names(st)
#(4) st의 행 이름을 출력하시오.
colnames(st)
#(5) st의 행의 개수와 열의 개수를 출력하시오.
table(iris)
#(6) st의 요약 정보를 출력하시오.
str(st)
#(5) st의 행의 개수와 열의 개수를 출력하시오.
table(st)
#(5) st의 행의 개수와 열의 개수를 출력하시오.
table(st[,])
#(5) st의 행의 개수와 열의 개수를 출력하시오.
table(st)
#(6) st의 요약 정보를 출력하시오.
str(st)
#(7) st의 행별 합계와 평균을 출력하시오.
rowSums(st)
#(7) st의 행별 합계와 평균을 출력하시오.
rowSums(st)
rowMeans(st)
#(8) st의 열별 합계와 평균을 출력하시오.
colSums(st)
colMeans(st)
#(9) Florida 주의 모든 정보를 출력하시오.
st['Florida',]
#(10) 50개 주의 수입(Income) 정보만 출력하시오.
st[,'Income']
#(11) Texas 주의 면적(Area)을 출력하시오. 시오.
t['Texas','Area']
#(11) Texas 주의 면적(Area)을 출력하시오. 시오.
st['Texas','Area']
#(12) Ohio 주의 인구(Population)와 수입(Income)을 출력하시오.
st['Ohio',c('Population','Income')]
#(13) 인구가 5,000 이상인 주의 데이터만 출력하시오.
st[st['Population']>5000]
#(14) 수입이 4,500 이상인 주의 인구, 수입, 면적을 출력하시오.
st[st['Income']>4500,c('Population','Income','Area')]
#(15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
table(st['Income']>4500,])
#(15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
table(st['Income'>4500,])
#(15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
table(st[,'Income'>4500])
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st[st['Population']>4500,c('Population','Income','Area')]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st[st['Population']<2000&st['Murder'<12],c('Population','Income','Area')]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st[st['Population']<2000&st['Murder'<12],]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st[,st['Population']<2000&st['Murder'<12]]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st[,st['Population']<2000&st['Murder'<12]]
#(5) st의 행의 개수와 열의 개수를 출력하시오.
nrow(st)
ncol(st)
#(6) st의 요약 정보를 출력하시오.
dim(st)
#(15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
nrow(st[,'Income'>4500])
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st[,st['Population']<2000&st['Murder'<12]]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st[,st[,'Population']<2000&st[,'Murder'<12]]
#(15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
nrow(st[,'Income'>4500])
#(16) 전체 면적(Area)이 100,000 이상이고, 결빙일수(Frost)가 120 이상인 주의 정보를 출력하시오.
st['Area'>100000&'Frost'>=120]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st[['Population']<2000&st['Murder'<12]]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st['Population']<2000&st['Murder'<12]]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st['Population']<2000&['Murder'<12]]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st['Population'<2000&'Murder'<12]]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st['Population'<2000&'Murder'<12]
#(17) 인구(Population)가 2,000 미만이고, 범죄율(Murder)이 12 미만인 주의 정보를 출력하시오.
st['Population'<2000 & 'Murder'<12]
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
colMeans(st['Illiteracy'>=2.0])
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
colMeans(st['Illiteracy'>=2.0],'Income')
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
colMeans('Income',st['Illiteracy'>=2.0])
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
colMeans(st['Illiteracy'>=2.0])
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
colMeans(st['Illiteracy'>=2.0][2])
#(19) 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이를 출력하시오.
colMeans(st['Illiteracy'<2.0][2])-colMeans(st['Illiteracy'>=2.0][2])
#(19) 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이를 출력하시오.
colMeans(st['Illiteracy'<2.0][2]-st['Illiteracy'>=2.0][2])
#(19) 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이를 출력하시오.
colMeans(st['Illiteracy'<2.0][2])-colMeans(st['Illiteracy'>=2.0][2])
colMeans(st['Illiteracy'>=2.0][2])
colMeans(st['Illiteracy'<2.0][2])
colMeans(st['Illiteracy'<2.0][2]
colMeans(st['Illiteracy'<2.0][2])
colMeans(st['Illiteracy'>=2.0][2])
colMeans(st['Illiteracy'<2.0])
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max(st['Life Exp'])
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max(st['Life Exp'])
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
st[max(st['Life Exp'])]
#(2) st의 내용을 출력하시오.
st
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
st[max(st['Life.Exp'])]
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
st[max(st['Life.Exp'])]
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max(st['Life.Exp'])
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
st[,max(st['Life.Exp'])]
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
st[max(st['Life.Exp']),]
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max(st['Life.Exp'])
st['Life.Exp'==73.6]
#(13) 인구가 5,000 이상인 주의 데이터만 출력하시오.
st[st['Population']>5000]
st['Life.Exp'==73.6]
# 행과 열을 바꾸기
t(city.info)
# 행과 열을 바꾸기
t(city.info)
iris
# 행과 열을 바꾸기
t(city.info)
# 행과 열을 바꾸기
t(city.info)
# 행과 열을 바꾸기
t(city.info)
# 행과 열을 바꾸기
t(city.info)
city.info
# 행과 열을 바꾸기
t(city.info)
#(13) 인구가 5,000 이상인 주의 데이터만 출력하시오.
subset(st,Population>5000)
#(13) 인구가 5,000 이상인 주의 데이터만 출력하시오.
subset(st,Population>5000)
subset(st,Income]>4500)
subset(st,Income>4500)
subset(st[,c('Population','Income','Area')],Income>4500)
#(15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
nrow(st[,'Income'>4500])
#(15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
nrow(subset(st,Income>4500))
subset(st,Area>100000&Frost>=120 )
subset(st, Population<2000 & Murder<12)
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
subset(st[,'Income'],Illiteracy>=2.0 )
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
subset(st[,'Income'],Illiteracy >=2.0 )
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
subset(st[,'Income'],Illiteracy >=2.0 )
colMeans(st['Illiteracy'>=2.0][2])
colMeans(st['Illiteracy'>=2.0][2])
colMeans(st['Illiteracy'>=2.0][2])
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
colMeans(subset(st,Illiteracy>=2.0)[2])
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
colMeans(subset(st,Illiteracy>=2.0))[2]
#(19) 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이를 출력하시오.
colMeans(subset(st,Illiteracy<2.0))[2]-colMeans(subset(st,Illiteracy>=2.0))[2]
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
subset(st,max(st('Life.Exp')))
st['Life.Exp'==73.6]
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max(subset(st,'Life.Exp'])
[
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max(st['Life.Exp'])
st['Life.Exp'==73.6]
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max(st['Life.Exp'])
st['Life.Exp'==73.6]
subset(st,Life.Exp==73.6]
subset(st,Life.Exp==73.6)
rownames(subset(st,Life.Exp==73.6))
#(21) Pennsylvania 주보다 수입(Income)이 높은 주들을 출력하시오.
st['Pennsylvania','Income']
subset(st, Income>st['Pennsylvania','Income'])
rownames(subset(st, Income>st['Pennsylvania','Income']))
rownames(subset(st,Life.Exp==max(st['Life.Exp'])))
rownames(subset(st,Life.Exp==73.6))
#(19) 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이를 출력하시오.
colMeans(subset(st[,'Income'],Illiteracy<2.0))-colMeans(subset(st,Illiteracy>=2.0))[2]
#(19) 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이를 출력하시오.
colMeans(subset(st[,'Income'],Illiteracy<2.0))-colMeans(subset(st[,'Income'],Illiteracy>=2.0))
#(19) 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이를 출력하시오.
colMeans(subset(st,Illiteracy<2.0))[2]-colMeans(subset(st,Illiteracy>=2.0))[2]
#(13) 인구가 5,000 이상인 주의 데이터만 출력하시오.
subset(st,Population>=5000)
#(15) 수입이 4,500 이상인 주는 몇 개인지 출력하시오.
nrow(subset(st,Income>4500))
#(18) 문맹률(Illiteracy)이 2.0 이상인 주의 평균 수입은 얼마인지 출력하시오.
colMeans(subset(st,Illiteracy>=2.0))[2]
#(19) 문맹률(Illiteracy)이 2.0 미만인 주와 2.0 이상인 주의 평균 수입의 차이를 출력하시오.
colMeans(subset(st,Illiteracy<2.0))[2]-colMeans(subset(st,Illiteracy>=2.0))[2]
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max(st['Life.Exp'])
#(20) 기대수명(Life Exp)이 가장 높은 주는 어디인지 출력하시오.
max(st['Life.Exp'])
# 2.5 연산자
a <-  matrix(1:20, nrow = 4,ncol = 5)
a
b <- matrix(21:40,4,5)
b
2*a
b-5
a+b
b/a
a*b
class(iris)
class(state.x77)
class(islands)
class(lh)
is.matrix(iris)
is.data.frame(iris)
# 매트릭스 --> 데이터 프레임셋
st <- data.frame(state.x77)
class(st)
class(iris)
as.iM <- as.matrix(iris)
class(as.iM)
## 열 추출하기
class(iris)
class(state.x77)
iris[,"Species"]
head(state.x77)
state.x77[,'Area']
iris[,5]
state.x77[,8]
iris['pecies']
iris['Species']
state.x77['Area']
iris[5]
state.x77[8]
iris$Species
state.x77$Area
name <- c('Tom','Jane','Nick')
age <- c(20,23,26)
gender <- ('M','F','M')
gender <- c('M','F','M')
height <- c(180,160,175)
student <- c(T,T,F)
human <- data.frame(name,age,gender,height,student)
human
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
list(human)
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
list(human,c(“Mary”, 24, “F”, 155, TRUE))
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
list(human,c(Mary, 24, F, 155, TRUE))
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
list(human,c('Mary', 24, F, 155, TRUE))
humna
human#(3) 이 데이터셋 열들의 자료형을 보이시오.
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
list(human,c('Mary', 24, F, 155, TRUE))
human
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
list(human,c('Mary', 24, F, 155, TRUE))
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
human[4] <- list(human,c('Mary', 24, F, 155, TRUE))
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
human[4] <- list(human,c('Mary', 24, 'F', 155, TRUE))
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
human <- list(human,c('Mary', 24, 'F', 155, TRUE))
human
human
human <- data.frame(name,age,gender,height,student)
human
#(2) human에 (“Mary”, 24, “F”, 155, TRUE)를 추가하시오(list함수 사용).
human <- list(human,c('Mary', 24, 'F', 155, TRUE))
human
human <- data.frame(name,age,gender,height,student)
human.new <- list(name='Mary', age=24, gender='F', height=155, student=TRUE)
human <- rbind(human,human.new)
human
#(3) 이 데이터셋 열들의 자료형을 보이시오.
str(human)
#(4) 평균 나이(age)와 평균 키(height)를 구하시오.
human$age
human['age']
human[,'age']
human[2]
human[2,]
human[,2]
mean(human$age)
mean(human$height)
#(5) 4번째 열을 제외한 human의 열 이름을 출력하시오.
colname(human)
#(5) 4번째 열을 제외한 human의 열 이름을 출력하시오.
colnames(human)
colnames(human[-4])
#(6) 성별(gender) 인원수를 보이시오.
table(human$gender)
# 파일 불러오기
setwd("D:\AI\study\r_study") # 파일 불러올 경로명
# 파일 불러오기
setwd("D:/AI/study/r_study") # 파일 불러올 경로명
read.csv('airquality.csv')
air <- read.csv('airquality.csv')
air
class(air)
air2 <- read.csv('D:/AI/study/r_study/airquality.csv')
air2
head(air2)
head(air2)
air2['Ozone']
air3 <- read.csv(file.choose())
head(air3)
#저장하기
subset(iris,Speices=='setosa')
#저장하기
subset(iris,Species=='setosa')
# iris에서 species== 'setosa' 인 것만 저장하기
iris.setosa <- subset(iris,Species=='setosa')
write.csv()
write.csv(iris.setosa)
write.csv(iris.setosa, 'irisfilename.csv')
# 첫째 열에는 열번호가 있다. 이 부분을 저장에서 제외하고 싶다!
write.csv(iris.setosa, 'irisfile1.csv', row.names = F)
write.csv(iris.setosa, file.choose())
